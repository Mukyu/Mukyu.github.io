<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mukyu</title>
  <subtitle>Android开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mukyu.github.io/"/>
  <updated>2017-08-20T15:58:47.950Z</updated>
  <id>https://mukyu.github.io/</id>
  
  <author>
    <name>Mukyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java字符串常量池-学习总结</title>
    <link href="https://mukyu.github.io/2017/08/19/Java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://mukyu.github.io/2017/08/19/Java字符串常量池-学习总结/</id>
    <published>2017-08-19T14:37:09.000Z</published>
    <updated>2017-08-20T15:58:47.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需要知道的几种常量池类型"><a href="#需要知道的几种常量池类型" class="headerlink" title="需要知道的几种常量池类型"></a>需要知道的几种常量池类型</h2><h3 id="class文件中的常量池"><a href="#class文件中的常量池" class="headerlink" title="class文件中的常量池"></a>class文件中的常量池</h3><p>在class文件中存在一个常量池，主要存放编译期间生成的<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10" target="_blank" rel="external">字面量</a>和符号引用。其中的字面量就包括我们在java代码中用双引号括起来的字符串。我们可以通过jdk自带的<code>javap</code>工具查看class文件中的常量池和编译后的字节码。以下为java源码与<code>javap -v</code>部分输出：<br>java源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>javap -v</code>的部分输出：<br><figure class="highlight console"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">C:\...&gt;javap -v Main</div><div class="line">...(系统信息等)</div><div class="line">Constant Pool:</div><div class="line">   ...(其他字面量和符号引用)</div><div class="line"><span class="meta">   #</span>3 = String             #23            // hello</div><div class="line">   ...</div><div class="line"><span class="meta">  #</span>23 = Utf8               hello</div><div class="line">   ...</div><div class="line">...(字节码、行号、本地变量表等)</div></pre></td></tr></table></figure></p>
<p>这两项分别表示class文件常量池中的<code>CONSTANT_String</code>和<code>CONSTANT_Utf8</code>类型的常量。其中，<code>CONSTANT_String</code>即表示String常量的类型，但它并没有持有String常量的内容，而是指向另一个常量类型为<code>CONSTANT_Utf8</code>的常量，在那里才真正存储着String常量的内容（注意这里仅仅保存着内容，而不是字符串实例）。具体的class文件中的常量池格式可以查看<a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4" target="_blank" rel="external">JVM规范-4.4. The Constant Pool</a>。</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>直接查看<a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.5" target="_blank" rel="external">JVM规范-2.5.5. Run-Time Constant Pool</a>。<br>原文：</p>
<blockquote>
<p>2.5.5. Run-Time Constant Pool</p>
<p>A run-time constant pool is a per-class or per-interface run-time representation of the constant_pool table in a class file (<a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4" target="_blank" rel="external">§4.4</a>). It contains several kinds of constants, ranging from numeric literals known at compile-time to method and field references that must be resolved at run-time. The run-time constant pool serves a function similar to that of a symbol table for a conventional programming language, although it contains a wider range of data than a typical symbol table.</p>
<p>Each run-time constant pool is allocated from the Java Virtual Machine’s method area (<a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4" target="_blank" rel="external">§2.5.4</a>). The run-time constant pool for a class or interface is constructed when the class or interface is created (<a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.3" target="_blank" rel="external">§5.3</a>) by the Java Virtual Machine.</p>
<p>The following exceptional condition is associated with the construction of the run-time constant pool for a class or interface:</p>
<p>When creating a class or interface, if the construction of the run-time constant pool requires more memory than can be made available in the method area of the Java Virtual Machine, the Java Virtual Machine throws an OutOfMemoryError.</p>
</blockquote>
<p>大意是，JVM在加载类和接口的时候都会在JVM<a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4" target="_blank" rel="external">方法区</a>中申请一块内存作为运行时常量池，运行时常量池的内容是class文件中常量池内容的体现。此外还提到，在加载类或接口时，所申请的运行时常量池的内存大小大于方法区所能申请的大小时，则会抛出<code>OutOfMemoryError</code>。<br>在这里可以简单的理解为class文件常量池中的字面量和符号引用等内容会在类加载时进入对应的运行时常量池中。</p>
<h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><p>字符串常量池是JVM所维护的一个字符串实例的引用表，在<a href="https://zh.wikipedia.org/wiki/HotSpot" target="_blank" rel="external">HotSpot VM</a>中，它是一个叫做StringTable的全局表。在字符串常量池中维护的是字符串实例的引用，这些被维护的引用所指的字符串实例，被称作”被驻留的字符串”或”interned string”或通常所说的”进入了字符串常量池的字符串”。</p>
<h2 id="有关String的intern方法"><a href="#有关String的intern方法" class="headerlink" title="有关String的intern方法"></a>有关String的intern方法</h2><p>查看<code>String.intern()</code>的Java Doc。<br>原文：</p>
<blockquote>
<p>java.lang.String<br>@NotNull<br>public String intern()<br>External annotations available:<br>@org.jetbrains.annotations.NotNull<br>Returns a canonical representation for the string object.<br>A pool of strings, initially empty, is maintained privately by the class String.<br>When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned.<br>It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true.<br>All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java™ Language Specification.<br>Returns:<br>a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.</p>
</blockquote>
<p>在String.intern()的Java Doc中有提到Sting类会私有维护一个字符串池(即字符串常量池)，当调用一个String实例的intern方法时，会先检查字符串池中是否存在相同内容的字符串实例的引用，如果有则返回该引用(原先在字符串池中的)，否则，会将String实例的引用添加进字符串池，接着返回该引用。然后还提到，任何字符串字面量或字符串的常量表达式都是interned的，即它们所指向的String对象都会在字符串常量池中留有一份引用。</p>
<p>在<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5" target="_blank" rel="external">Java语言规范-3.10.5. String Literals</a>有一段关于字符串字面量的描述：</p>
<blockquote>
<p>Moreover, a string literal always refers to the same instance of class String. This is because string literals - or, more generally, strings that are the values of constant expressions (§15.28) - are “interned” so as to share unique instances, using the method String.intern.</p>
</blockquote>
<p>即字符串字面量或内容相同的字符串常量表达式，例如<code>&quot;hello&quot;</code>与<code>&quot;hel&quot; + &quot;lo&quot;</code>都指向同一个字符串对象实例</p>
<h2 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a>字符串的创建</h2><p>通过一个简单的案例来了解字符串的创建过程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        String s1 = <span class="string">"hello"</span>;</div><div class="line">        System.out.println(s1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>首先在编译期间，<code>&quot;hello&quot;</code>作为字符串的字面量，会被保存在class文件的常量池中，具体为一个<code>CONSTANT_String</code>类型的常量指向另一个<code>CONSTANT_Utf8</code>类型的常量，而<code>CONSTANT_Utf8</code>类型的常量中保存着<code>hello</code>这几个字符的Unicode编码。</li>
<li>接着在Main.class文件被加载时，会在方法区中申请一个块内存作为Main类的运行时常量池，并将Main.class文件中常量池的内容放进运行时常量池中。注意此时，还没有创建”hello”字符串的任何实例。</li>
<li>接着到执行<code>String s1 = &quot;hello&quot;;</code>时，表示”hello”字面量的<code>CONSTANT_String</code>类型的常量会被推到栈顶，此时会发现此变量尚未进入resolve阶段，因此会先执行resolve。在resolve阶段，首先会先查看字符串常量池中是否有相同内容的字符串实例的引用，如果有，则直接使用该引用，否则会在堆内存中创建一个新的字符串实例，其内容与<code>CONSTANT_String</code>类型的常量所指向另一个<code>CONSTANT_Utf8</code>类型的常量中的内容一致，接着将这个引用添加到字符串常量池中，最后返回该引用。</li>
<li>最后将引用赋给<code>s1</code>，打印并return。</li>
</ol>
<p>有几点需要注意的：</p>
<ol>
<li>字符串的字面量指向一个字符串对象的实例，这个字符串对象实例的引用保存在字符串常量池中。</li>
<li>相同的字符串的字面量表示同一个字符串对象实例。</li>
<li>字符串字面量所表示的字符串对象实例并非一定在类加载阶段实例化。而是在resolve阶段，而resolve阶段的执行是可以延迟的。可以理解为当执行到字面量所在的代码时才会进入resolve阶段(对应的字节码指令为ldc)。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需要知道的几种常量池类型&quot;&gt;&lt;a href=&quot;#需要知道的几种常量池类型&quot; class=&quot;headerlink&quot; title=&quot;需要知道的几种常量池类型&quot;&gt;&lt;/a&gt;需要知道的几种常量池类型&lt;/h2&gt;&lt;h3 id=&quot;class文件中的常量池&quot;&gt;&lt;a href=&quot;#c
    
    </summary>
    
      <category term="基础" scheme="https://mukyu.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java" scheme="https://mukyu.github.io/categories/%E5%9F%BA%E7%A1%80/Java/"/>
    
    
      <category term="Java" scheme="https://mukyu.github.io/tags/Java/"/>
    
      <category term="String" scheme="https://mukyu.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建完毕</title>
    <link href="https://mukyu.github.io/2017/08/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%AF%95/"/>
    <id>https://mukyu.github.io/2017/08/16/博客搭建完毕/</id>
    <published>2017-08-15T16:24:41.000Z</published>
    <updated>2017-08-16T02:12:34.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关参考资料"><a href="#相关参考资料" class="headerlink" title="相关参考资料"></a>相关参考资料</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT 使用文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;相关参考资料&quot;&gt;&lt;a href=&quot;#相关参考资料&quot; class=&quot;headerlink&quot; title=&quot;相关参考资料&quot;&gt;&lt;/a&gt;相关参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; re
    
    </summary>
    
      <category term="日常" scheme="https://mukyu.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="日常" scheme="https://mukyu.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
